"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
const fs_1 = require("fs");
const G = require("glob");
const moment = require("moment");
const nodemailer_1 = require("nodemailer");
const path_1 = require("path");
// read config
const config = JSON.parse(fs_1.readFileSync(path_1.join(__dirname, '..', 'config', 'config.json')).toString());
// create transport
const transporter = nodemailer_1.createTransport({
    auth: {
        pass: config.smtp.pass,
        user: config.smtp.user,
    },
    host: 'smtp.gmail.com',
    secure: true,
});
// verify the transport
transporter.verify((err) => {
    if (err) {
        throw err;
    }
});
/**
 * Calculate md5 hash of something
 * @param content Something to calculate md5 hash for
 */
function md5(content) {
    const hash = crypto_1.createHash('md5');
    hash.update(content);
    return hash.digest('hex').toString();
}
setTimeout(() => {
    const now = moment('2017-12-17T22:05:40');
    const start = moment(now).subtract(20, 'seconds');
    const iterator = moment(start);
    let glob = path_1.join(__dirname, '..', 'database', 'images')
        + '/@(' + start.format('YYYYMMDD-HHmmss').substr(0, 14);
    for (let i = 0; i < 4; i++) {
        iterator.add(10, 'seconds');
        glob += '|' + iterator.format('YYYYMMDD-HHmmss').substr(0, 14);
    }
    glob += ')*.jpg';
    console.log(now.toISOString(), start.toISOString(), iterator.toISOString(), glob);
    G(glob, {}, (err, files) => {
        if (err) {
            throw err;
        }
        if (files.length > 30) {
            files = files.slice(files.length - 30, files.length - 1);
        }
        if (files.length === 0) {
            console.info('No images to send.');
            return;
        }
        const message = {
            attachments: files.map((file) => {
                return {
                    cid: md5(file),
                    filename: path_1.basename(file),
                    path: file,
                };
            }),
            from: config.smtp.user,
            html: files.map((file) => {
                return `<img src="cid:${md5(file)}" width="100%"/>`;
            }).join('<br/>'),
            subject: '[Motion] ' + now.toLocaleString(),
            to: config.allowedEmails,
        };
        transporter.sendMail(message, (sendErr, info) => {
            if (sendErr) {
                throw sendErr;
            }
            console.log(info);
        });
        fs_1.writeFileSync(path_1.join(__dirname, '..', 'database', 'events', now.format('X')), JSON.stringify(files.map((file) => path_1.basename(file))));
    });
}, 10000);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJldmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFrQztBQUNsQywyQkFBK0M7QUFDL0MsMEJBQTBCO0FBQzFCLGlDQUFpQztBQUNqQywyQ0FBMkM7QUFDM0MsK0JBQW9DO0FBRXBDLGNBQWM7QUFDZCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFZLENBQUMsV0FBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUVuRyxtQkFBbUI7QUFDbkIsTUFBTSxXQUFXLEdBQUcsNEJBQWUsQ0FBQztJQUNsQyxJQUFJLEVBQUU7UUFDSixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJO1FBQ3RCLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUk7S0FDdkI7SUFDRCxJQUFJLEVBQUUsZ0JBQWdCO0lBQ3RCLE1BQU0sRUFBRSxJQUFJO0NBQ2IsQ0FBQyxDQUFDO0FBRUgsdUJBQXVCO0FBQ3ZCLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtJQUN6QixJQUFJLEdBQUcsRUFBRTtRQUNQLE1BQU0sR0FBRyxDQUFDO0tBQ1g7QUFDSCxDQUFDLENBQUMsQ0FBQztBQUVIOzs7R0FHRztBQUNILFNBQVMsR0FBRyxDQUFDLE9BQWU7SUFDMUIsTUFBTSxJQUFJLEdBQUcsbUJBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUN2QyxDQUFDO0FBRUQsVUFBVSxDQUFDLEdBQUcsRUFBRTtJQUNkLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQzFDLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ2xELE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUUvQixJQUFJLElBQUksR0FBRyxXQUFJLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsUUFBUSxDQUFDO1VBQ2xELEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUUxRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzFCLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzVCLElBQUksSUFBSSxHQUFHLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDaEU7SUFFRCxJQUFJLElBQUksUUFBUSxDQUFDO0lBRWpCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxFQUFFLEtBQUssQ0FBQyxXQUFXLEVBQUUsRUFBRSxRQUFRLENBQUMsV0FBVyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFbEYsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDekIsSUFBSSxHQUFHLEVBQUU7WUFDUCxNQUFNLEdBQUcsQ0FBQztTQUNYO1FBRUQsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLEVBQUUsRUFBRTtZQUNyQixLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEVBQUUsRUFBRSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzFEO1FBRUQsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN0QixPQUFPLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFDbkMsT0FBTztTQUNSO1FBRUQsTUFBTSxPQUFPLEdBQUc7WUFDZCxXQUFXLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO2dCQUM5QixPQUFPO29CQUNMLEdBQUcsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDO29CQUNkLFFBQVEsRUFBRSxlQUFRLENBQUMsSUFBSSxDQUFDO29CQUN4QixJQUFJLEVBQUUsSUFBSTtpQkFDWCxDQUFDO1lBQ0osQ0FBQyxDQUFDO1lBQ0YsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSTtZQUN0QixJQUFJLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO2dCQUN2QixPQUFPLGlCQUFpQixHQUFHLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDO1lBQ3RELENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDaEIsT0FBTyxFQUFFLFdBQVcsR0FBRyxHQUFHLENBQUMsY0FBYyxFQUFFO1lBQzNDLEVBQUUsRUFBRSxNQUFNLENBQUMsYUFBYTtTQUN6QixDQUFDO1FBRUYsV0FBVyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUU7WUFDOUMsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsTUFBTSxPQUFPLENBQUM7YUFDZjtZQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7UUFFSCxrQkFBYSxDQUNYLFdBQUksQ0FDRixTQUFTLEVBQ1QsSUFBSSxFQUNKLFVBQVUsRUFDVixRQUFRLEVBQ1IsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FDaEIsRUFDRCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLGVBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ3BELENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyJ9