"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const G = require("glob");
const moment = require("moment");
const nodemailer_1 = require("nodemailer");
const path_1 = require("path");
const config = require(path_1.join(__dirname, '..', 'config', 'config.json'));
const transporter = nodemailer_1.createTransport({
    auth: {
        pass: config.smtp.pass,
        user: config.smtp.user
    },
    host: 'smtp.gmail.com',
    secure: true
});
transporter.verify((err) => {
    if (err) {
        console.error(err);
    }
});
setTimeout(() => {
    const now = moment();
    const start = moment(now).subtract(20, 'seconds');
    const end = moment(now).add(10, 'seconds');
    const glob = path_1.join(__dirname, '..', 'database', 'images') +
        '/@(' + start.format('YYYYMMDD-HHmmss').substr(0, 14) +
        '|' + now.format('YYYYMMDD-HHmmss').substr(0, 14) +
        '|' + end.format('YYYYMMDD-HHmmss').substr(0, 14) + ')*.jpg';
    G(glob, {}, (err, files) => {
        if (files.length > 20) {
            files = files.slice(files.length - 20, files.length - 1);
        }
        if (files.length === 0) {
            return;
        }
        const message = {
            attachments: files.map((file) => {
                return {
                    filename: path_1.basename(file),
                    path: file
                };
            }),
            from: config.smtp.user,
            subject: '[Motion] ' + now.toISOString(),
            text: JSON.stringify(files, null, 2),
            to: config.allowedEmails
        };
        transporter.sendMail(message, (sendErr, info) => {
            if (sendErr) {
                console.error(sendErr);
            }
            console.log(info);
        });
        fs_1.writeFileSync(path_1.join(__dirname, '..', 'database', 'events', (new Date()).getTime().toString()), JSON.stringify(files));
    });
}, 10000);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvd3VsZmVydC9wcml2YXRlL21vdGlvbi9zZXJ2ZXIvc3JjLyIsInNvdXJjZXMiOlsiZXZlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQkFBaUM7QUFDakMsMEJBQTBCO0FBQzFCLGlDQUFpQztBQUNqQywyQ0FBMkM7QUFDM0MsK0JBQW9DO0FBRXBDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxXQUFJLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztBQUV2RSxNQUFNLFdBQVcsR0FBRyw0QkFBZSxDQUFDO0lBQ2xDLElBQUksRUFBRTtRQUNKLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUk7UUFDdEIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSTtLQUN2QjtJQUNELElBQUksRUFBRSxnQkFBZ0I7SUFDdEIsTUFBTSxFQUFFLElBQUk7Q0FDYixDQUFDLENBQUM7QUFFSCxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7SUFDekIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNSLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDckIsQ0FBQztBQUNILENBQUMsQ0FBQyxDQUFDO0FBRUgsVUFBVSxDQUFDLEdBQUcsRUFBRTtJQUNkLE1BQU0sR0FBRyxHQUFHLE1BQU0sRUFBRSxDQUFDO0lBRXJCLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ2xELE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRTNDLE1BQU0sSUFBSSxHQUFHLFdBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxRQUFRLENBQUM7UUFDdEQsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNyRCxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ2pELEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUM7SUFFL0QsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDekIsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsRUFBRSxFQUFFLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDM0QsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QixNQUFNLENBQUM7UUFDVCxDQUFDO1FBRUQsTUFBTSxPQUFPLEdBQUc7WUFDZCxXQUFXLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO2dCQUM5QixNQUFNLENBQUM7b0JBQ0wsUUFBUSxFQUFFLGVBQVEsQ0FBQyxJQUFJLENBQUM7b0JBQ3hCLElBQUksRUFBRSxJQUFJO2lCQUNYLENBQUM7WUFDSixDQUFDLENBQUM7WUFDRixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJO1lBQ3RCLE9BQU8sRUFBRSxXQUFXLEdBQUcsR0FBRyxDQUFDLFdBQVcsRUFBRTtZQUN4QyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUNwQyxFQUFFLEVBQUUsTUFBTSxDQUFDLGFBQWE7U0FDekIsQ0FBQztRQUVGLFdBQVcsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFO1lBQzlDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ1osT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN6QixDQUFDO1lBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztRQUVILGtCQUFhLENBQ1gsV0FBSSxDQUNGLFNBQVMsRUFDVCxJQUFJLEVBQ0osVUFBVSxFQUNWLFFBQVEsRUFDUixDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FDbEMsRUFDRCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMifQ==